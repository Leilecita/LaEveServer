<?php
/**
 * Created by PhpStorm.
 * User: leila
 * Date: 09/05/2019
 * Time: 15:24
 */

require_once 'BaseController.php';
require_once __DIR__.'/SecureBaseController.php';
require_once  __DIR__.'/../models/OrderModel.php';
require_once __DIR__.'/../models/ItemOrderModel.php';
require_once __DIR__.'/../models/ClientModel.php';
require_once __DIR__.'/../models/UserModel.php';
require_once __DIR__.'/../models/AssignedZoneModel.php';

class OrdersController extends SecureBaseController
{
    private $items_order;
    private $clients;

    private $state_order;
    private $users;
    private $assigned_zones;

    function __construct(){
        parent::__construct();
        $this->model = new OrderModel();
        $this->items_order= new ItemOrderModel();
        $this->clients= new ClientModel();
        $this->users= new UserModel();
        $this->assigned_zones= new AssignedZoneModel();

        $this->state_order="";
    }

    public function delete()
    {
        //TODO ver estado del pedido, si no esta entregado, se borra todo
        if(isset($_GET['id'])){
            $this->items_order->deleteAllByOrderId($_GET['id']);
        }
        parent::delete(); // TODO: Change the autogenerated stub
    }

    function changeFormatDate($origDate){

        $date = str_replace('/', '-', $origDate );
        $newDate = date("Y-m-d", strtotime($date));
            return $newDate;
    }

    function asingFilters(){
        $filters=array();

        if(isset($_GET['delivery_date'])) {
            if($_GET['delivery_date'] != 'todas') {
                $filters[] = 'delivery_date = "' . $_GET['delivery_date'] . '"';
            }
        }

        if(isset($_GET['state'])){
            if($_GET['state']== 'tocheck'){
                $this->state_order="state_check";
                $filters[] = 'tocheck = "true"';
                if(isset($_GET['state_order']) && ($_GET['state_order']) == "pendients"){
                    $filters[] = 'state_check = "tocheck"';
                }

            }else if ($_GET['state']== 'toprepare'){
                $this->state_order="state_prepare";
                $filters[] = 'toprepare = "true"';
                if(isset($_GET['state_order']) && ($_GET['state_order']) == "pendients"){
                    $filters[] = 'state_prepare = "toprepare"';
                }

            }else if ($_GET['state']== 'tobilling'){
                $this->state_order="state_billing";
                $filters[] = 'tobilling = "true"';
                if(isset($_GET['state_order']) && ($_GET['state_order']) == "pendients"){
                    $filters[] = 'state_billing = "tobilling"';
                }

            }else if ($_GET['state']== 'todelivery'){
                $this->state_order="state_delivery";
                $filters[] = 'todelivery = "true"';
                if(isset($_GET['state_order']) && ($_GET['state_order']) == "pendients"){
                    $filters[] = 'state_delivery = "todelivery"';
                }
            }
        }

        if(isset($_GET['zone']) && !empty($_GET['zone'])){
            $filters[] = 'assigned_zone = "' . $_GET['zone'] . '"';
        }

        if(isset($_GET['query']) && !empty($_GET['query'])){
            $filters[] = '(comcli like "%'.$_GET['query'].'%" OR nomcli like "%'.$_GET['query'].'%")';
        }

        return $filters;
    }

    function miniFilter(){
        $filters=array();

        if(isset($_GET['query']) && !empty($_GET['query'])){
            $filters[] = '(comcli like "%'.$_GET['query'].'%" OR nomcli like "%'.$_GET['query'].'%")';
        }

        if(isset($_GET['zone']) && !empty($_GET['zone'])){
            $filters[] = 'assigned_zone = "' . $_GET['zone'] . '"';
        }
        return $filters;
    }

    function getPaginatorOrders(){
        $paginator = array('offset' => 0, 'limit' => 2);
        if(isset($_GET['page'])){
            $paginator['offset'] = 2 * $_GET['page'];
        }
        return $paginator;
    }

    function listAllOrders(){

        $listReport = array();
        $list_orders_by_deliver_date = $this->model->getAllOrders($this->miniFilter(),$this->getPaginatorOrders());
        $this->returnSuccess(200, $this->getReport($list_orders_by_deliver_date,$listReport));
    }

    function listAllOrdersLEILA(){

        $listReport = array();
        $list_orders_by_deliver_date = $this->model->getAllOrdersLeila($this->miniFilter(),$this->getPaginator());
        $this->returnSuccess(200, $list_orders_by_deliver_date);
    }

    /*agrego*/

    function getItemsByReportByOrderId(){
        $order_id = $_GET['order_id'];

        $items_order_list = $this->items_order->findAllItems(array('order_id = "' .$order_id.'"'));

        $array_item_product = array();

        $array_item_product_rem = array();

        $array_item_product_add = array();

        $total_amount=0;

        for ($i = 0; $i < count($items_order_list); ++$i) {

            if($items_order_list[$i]['billing'] == "remito"){
                $array_item_product_rem[] = $this->createReportItem($items_order_list[$i],$array_item_product_rem);

            }else if($items_order_list[$i]['billing'] == "factura"){
                $array_item_product[] = $this->createReportItem($items_order_list[$i],$array_item_product);

            }else{
                $array_item_product_add[] =  $this->createReportItem($items_order_list[$i],$array_item_product_add);
            }

            if($items_order_list[$i]['loaded'] == "true"){

                if($items_order_list[$i]['able_kg'] == "true"){
                    $total_amount=$total_amount+($items_order_list[$i]['price']*$items_order_list[$i]['kg']);
                }else{
                    $total_amount=$total_amount+($items_order_list[$i]['price']*$items_order_list[$i]['quantity']);
                }
            }
        }

        $listReport = array(
            'items' => $array_item_product,
            'items_rem' => $array_item_product_rem,
            'items_add' => $array_item_product_add,
            'amount_order' => $total_amount
        );

        $this->returnSuccess(200, $listReport);
    }

/*agregp*/


    function getReport($list_orders_by_deliver_date,$listReport){

        for ($j = 0; $j < count($list_orders_by_deliver_date); ++$j) {

            //$items_order_list = $this->items_order->findAllItems(array('order_id = "' .$list_orders_by_deliver_date[$j]['order_id'].'"'));

            $array_item_product = array();

            $array_item_product_rem = array();

            $array_item_product_add = array();

            $total_amount=0;
           /* for ($i = 0; $i < count($items_order_list); ++$i) {

                if($items_order_list[$i]['billing'] == "remito"){
                    $array_item_product_rem[] = $this->createReportItem($items_order_list[$i],$array_item_product_rem);

                }else if($items_order_list[$i]['billing'] == "factura"){
                    $array_item_product[] = $this->createReportItem($items_order_list[$i],$array_item_product);

                }else{
                    $array_item_product_add[] =  $this->createReportItem($items_order_list[$i],$array_item_product_add);
                }

                if($items_order_list[$i]['loaded'] == "true"){

                    if($items_order_list[$i]['able_kg'] == "true"){
                        $total_amount=$total_amount+($items_order_list[$i]['price']*$items_order_list[$i]['kg']);
                    }else{
                        $total_amount=$total_amount+($items_order_list[$i]['price']*$items_order_list[$i]['quantity']);
                    }
                }
            }*/

            $items_cant = $this->items_order->countItemsByOrder($list_orders_by_deliver_date[$j]['order_id']);
            $pendient_items = $this->items_order->countPendientItems("false" ,$list_orders_by_deliver_date[$j]['order_id']);

            $proces_user_name = "";
            if($list_orders_by_deliver_date[$j]['process_user_id'] > 0){
                $process_user = $this->users->findById($list_orders_by_deliver_date[$j]['process_user_id']);
                $proces_user_name = $process_user['name'];
            }

            $process_billing_user_name = "";
            if($list_orders_by_deliver_date[$j]['process_billing_user_id'] > 0){
                $process_billing_user = $this->users->findById($list_orders_by_deliver_date[$j]['process_billing_user_id']);
                $process_billing_user_name =  $process_billing_user['name'];
            }



            $listReport[] = array('order_created' => $list_orders_by_deliver_date[$j]['created'],
                'order_obs' => $list_orders_by_deliver_date[$j]['observation'],'order_id' => $list_orders_by_deliver_date[$j]['order_id'],
                'order_state' => $list_orders_by_deliver_date[$j]['state'],
                'order_state_check' => $list_orders_by_deliver_date[$j]['state_check'],
                'order_state_prepare' => $list_orders_by_deliver_date[$j]['state_prepare'],
                'order_state_billing' => $list_orders_by_deliver_date[$j]['state_billing'],
                'order_state_delivery' => $list_orders_by_deliver_date[$j]['state_delivery'],
                'order_signed' => $list_orders_by_deliver_date[$j]['signed'],
                'order_paid_out' => $list_orders_by_deliver_date[$j]['paid_out'],
                'order_paid_amount' => $list_orders_by_deliver_date[$j]['paid_amount'],
                'client_id' => $list_orders_by_deliver_date[$j]['client_id'],
                'client_nomcli' => $list_orders_by_deliver_date[$j]['nomcli'],
                'client_dircli' =>$list_orders_by_deliver_date[$j]['dircli'],
                'client_loccli' => $list_orders_by_deliver_date[$j]['loccli'],
                'assigned_zone' => $list_orders_by_deliver_date[$j]['assigned_zone'],
                'client_comcli' => $list_orders_by_deliver_date[$j]['comcli'],
                'client_telcli' => $list_orders_by_deliver_date[$j]['telcli'],
                'delivery_date' => $list_orders_by_deliver_date[$j]['delivery_date'], 'items' => $array_item_product,'items_rem' => $array_item_product_rem,'items_add' => $array_item_product_add,
                'amount_order' => $total_amount,
                'loaded_in' => $list_orders_by_deliver_date[$j]['loaded_in'],
                'loaded_by' => $list_orders_by_deliver_date[$j]['loaded_by'],
                'prepared_by' => $list_orders_by_deliver_date[$j]['prepared_by'],
                'billed_by' => $list_orders_by_deliver_date[$j]['billed_by'],
                'delivery_by' => $list_orders_by_deliver_date[$j]['delivery_by'],
                'products_cant' => $items_cant,
                'pendients_cant' => $pendient_items,
                'prepare_in_process' => $list_orders_by_deliver_date[$j]['prepare_in_process'],
                'billing_in_process' => $list_orders_by_deliver_date[$j]['billing_in_process'],
               // 'process_user_name' => $process_user['name'],
                'process_user_name' => $proces_user_name,
               // 'process_billing_user_name' => $process_billing_user['name']
                'process_billing_user_name' => $process_billing_user_name

            );
        }

        return $listReport;
    }


    function getOrdersClient(){

        $listReport = array();

        $list_orders_by_deliver_date = $this->model->getOrdersClient($this->asingFilters(),$this->getPaginatorOrders(),$this->state_order);

        $this->returnSuccess(200, $this->getReport($list_orders_by_deliver_date,$listReport));
    }

    function deleteRemainingProducts($order_id){

        $filtersItem=array();
        $filtersItem[] = 'order_id = "' . $order_id . '"';
        $filtersItem[] = 'loaded = "false"';

        $items_order_list = $this->items_order->findAllItems($filtersItem);
        for ($i = 0; $i < count($items_order_list); ++$i) {
            $this->items_order->delete($items_order_list[$i]['id']);
        }
    }

    //nueva orden desde facturacion

    function createNewOrderWithPendientsProducts(){

        $order=$this->getModel()->findById($_GET['order_id']);

        $items_order_list = $this->items_order->findAllItems(array('order_id = "' .$_GET['order_id'].'"'));

        $next_date = date('Y-m-d', strtotime($order['delivery_date'].' +1 day'));

        $newOrder =array('user_id'=>1,'client_id' => $order['client_id'],
            'state' => "",
            'state_check' => "check",
            'state_prepare' => "toprepare",
            'state_billing' => "tobilling",
            'state_delivery' => "todelivery",
            'tocheck' => "true",
            'toprepare' => "true",
            'tobilling' => "false",
            'todelivery' => "false",
            'observation' => "",
            'total_amount' => 0.0,
            'delivery_date'=> $next_date,
            'loaded_by'=> $order['loaded_by'],
            'delivery_by' => "",
            'prepared_by' => "",
            'billed_by' => "",
            'assigned_zone' => $order['assigned_zone'],
            'loaded_in' => $order['loaded_in'],
            'signed' => "false",
            'paid_out' => "false",
            'paid_amount' => 0.0,
            'order_reasigned_id' => -1);

        $res=$this->model->save($newOrder);

        if($res>= 0){
            //me guardo el id de la orden a la que van a ser reasignados los productos.

            $this->model->update($order['id'],array('order_reasigned_id' => $res));

            for ($i = 0; $i < count($items_order_list); ++$i) {
                if($items_order_list[$i]['loaded'] == "false"){
                    //aca hay que duplicar este item a la nueva orden , porque sino se pirde.

                    $newItem=$items_order_list[$i];
                    $newItem['order_id']= $res;
                    $newItem['reasigned_quantity']= "false"; // lo pongo en false para que se pueda cargar en la orden nueva

                    unset($newItem['id']);

                    $resItem = $this->items_order->save($newItem);

                    $this->items_order->update($items_order_list[$i]['id'],array('reasigned_quantity' => "true"));
                }
            }

            $resp=array('result' => "ok");

            $this->returnSuccess(200,$resp);
        }
    }
    //

    function checkFullOrder(){
        $res=$this->items_order->countItemsLoaded("false",$_GET['order_id']);
        if($res == 0){
            $resp=array('fullOrder'=>"completa",'cant' => $res);
            $this->returnSuccess(200,$resp);
        }else{
            $resp2=array('fullOrder'=>"falta",'cant' => $res);
            $this->returnSuccess(200,$resp2);
        }
    }

   function takeOrderPrepare(){
        $order = $this->model->findById($_GET['order_id']);

        if($order['process_user_id'] != -1){

            $user = $this->users->findById($order['process_user_id']);

            $res = array('result' => "reserved", 'process_user_name' => $user['name']);
            $this->returnSuccess(200,$res);
        }else{

            $this->model->update($_GET['order_id'],array('prepare_in_process' => "true"));
            $this->model->update($_GET['order_id'],array('process_user_id' => $_GET['user_id']));

            $user = $this->users->findById($_GET['user_id']);

            $res = array('result' => "true", 'process_user_name' => $user['name']);
            $this->returnSuccess(200,$res);
        }
   }

    function takeOrderBilling(){
        $order = $this->model->findById($_GET['order_id']);

        if($order['process_billing_user_id'] != -1){
            $user = $this->users->findById($order['process_billing_user_id']);
            $res = array('result' => "reserved", 'process_user_name' => $user['name']);
            $this->returnSuccess(200,$res);
        }else{

            $this->model->update($_GET['order_id'],array('billing_in_process' => "true"));
            $this->model->update($_GET['order_id'],array('process_billing_user_id' => $_GET['user_id']));

            $user = $this->users->findById($_GET['user_id']);

            $res = array('result' => "true", 'process_user_name' => $user['name']);
            $this->returnSuccess(200,$res);
        }
    }

    function leaveOrderPrepare(){
        $this->model->update($_GET['order_id'],array('prepare_in_process' => "false"));
        $this->model->update($_GET['order_id'],array('process_user_id' => -1));
        $this->returnSuccess(200,array('result' => "false"));
    }

    function leaveOrderBilling(){
        $this->model->update($_GET['order_id'],array('billing_in_process' => "false"));
        $this->model->update($_GET['order_id'],array('process_billing_user_id' => -1));
        $this->returnSuccess(200,array('result' => "false"));
    }

    function changeStateOrder(){

        if(isset($_GET['state'])){
            if($_GET['state_name'] == 'tocheck'){

                $this->model->update($_GET['order_id'],array('state_check' => $_GET['state']));
                if($_GET['state'] == "check"){
                    $this->model->update($_GET['order_id'],array('toprepare' => "true"));
                }else{
                    $this->model->update($_GET['order_id'],array('toprepare' => "false"));
                }

            }else if($_GET['state_name'] == 'toprepare'){

                $this->model->update($_GET['order_id'],array('state_prepare' => $_GET['state']));
                if($_GET['state'] == "prepare"){

                    $this->model->update($_GET['order_id'],array('tobilling' => "true"));


                }else{
                    $this->model->update($_GET['order_id'],array('tobilling' => "false"));


                }

            }else if($_GET['state_name'] == 'tobilling'){

                $this->model->update($_GET['order_id'],array('state_billing' => $_GET['state']));
                if($_GET['state'] == "billing"){
                    $this->model->update($_GET['order_id'],array('todelivery' => "true"));
                }else{
                    $this->model->update($_GET['order_id'],array('todelivery' => "false"));
                }

            }else if($_GET['state_name'] == 'todelivery'){
                $this->model->update($_GET['order_id'],array('state_delivery' => $_GET['state']));
            }

            $stateOrder=array('state'=>$_GET['state']);

            //asignar empleado

            if(isset($_GET['prepared_by'])) {
                $this->model->update($_GET['order_id'], array('prepared_by' => $_GET['prepared_by']));
            }

            if(isset($_GET['billed_by'])) {
                $this->model->update($_GET['order_id'], array('billed_by' => $_GET['billed_by']));
            }

            if(isset($_GET['delivery_by'])) {
                $this->model->update($_GET['order_id'], array('delivery_by' => $_GET['delivery_by']));
            }

            $this->returnSuccess(200,$stateOrder);
        }else{
            $this->returnError(400,"No se pudo actualizar");
        }
    }

    function getOrdersValues(){
        $checked=0;
        $pendients=0;

        if($_GET['state_name']== 'tocheck'){

            $checked=$this->model->countCheck($_GET['delivery_date'],'check');
            $pendients=$this->model->countCheck($_GET['delivery_date'],'tocheck');
        }else if ($_GET['state_name']== 'toprepare'){

            $checked=$this->model->countPrepare($_GET['delivery_date'],'prepare');
            $pendients=$this->model->countPrepare($_GET['delivery_date'],'toprepare');

        }else if ($_GET['state_name']== 'todelivery'){

            $checked=$this->model->countDelivery($_GET['delivery_date'],'delivery');
            $pendients=$this->model->countDelivery($_GET['delivery_date'],'todelivery');

        }else if ($_GET['state_name']== 'tobilling'){

            $checked=$this->model->countBilling($_GET['delivery_date'],'billing');
            $pendients=$this->model->countBilling($_GET['delivery_date'],'tobilling');

        }
        $resp=array('pendients' => $pendients, 'checked' => $checked);

        $this->returnSuccess(200,$resp);
    }

    function updatePaymentValue(){

        if(isset($_GET['order_id']) ){

            $this->model->update($_GET['order_id'],array('paid_amount' => $_GET['value']));
            $this->model->update($_GET['order_id'],array('paid_out' => "true"));

            $paymentData=array('state'=>"value", 'total_amount' => $_GET['value']);

            $this->returnSuccess(200,$paymentData);
        }else{
            $this->returnError(400,"No se pudo actualizar");
        }
    }

    function updatePayment(){

        $select="";
        if(isset($_GET['order_id']) ){

            $total_amount=0;

            if($_GET['paid'] == 'false'){
                $this->model->update($_GET['order_id'],array('paid_out' => "false"));

                $this->model->update($_GET['order_id'],array('paid_amount' => 0));
                $this->model->update($_GET['order_id'],array('total_amount' => 0));
                $total_amount=0;

                $select="false";
            }else if($_GET['paid'] == 'true'){

                $this->model->update($_GET['order_id'],array('paid_out' => "true"));

                $total_amount=$this->getTotalAmountByOrderId($_GET['order_id']);

                $this->model->update($_GET['order_id'],array('paid_amount' => $total_amount));
                $this->model->update($_GET['order_id'],array('total_amount' => $total_amount));

                $select="true";
            }

            if($_GET['signed'] == 'false'){
                $this->model->update($_GET['order_id'],array('signed' => "false"));
                $select="false";
            }else if($_GET['signed'] == 'true'){
                $this->model->update($_GET['order_id'],array('signed' => "true"));
                $select="true";
            }

            $paymentData=array('state'=>$select, 'total_amount' => $total_amount);

            $this->returnSuccess(200,$paymentData);
        }else{
            $this->returnError(400,"No se pudo actualizar");
        }
    }


    function getTotalAmountByOrderId($order_id){
        $order= $this->model->findById($order_id);

        if($order>0){

            $items_order_list = $this->items_order->findAllItems(array('order_id = "' .$order_id.'"'));
            $total_amount=0;
            for ($i = 0; $i < count($items_order_list); ++$i) {

                if($items_order_list[$i]['loaded'] == "true"){
                    $total_amount=$total_amount+($items_order_list[$i]['price']*$items_order_list[$i]['quantity']);
                }
            }
            return $total_amount;
        }else{
            return 0;
        }
    }

    function createReportItem($items_order_list,$array_item){

        $array_item = array('item_order_id' => $items_order_list['id'],'product_descr' => $items_order_list['product_descr'], 'price' => $items_order_list['price'],
            'preci1' => $items_order_list['preci1'],'preci2' => $items_order_list['preci2'],'preci3' => $items_order_list['preci3'],'preci4' => $items_order_list['preci4'],'preci5' => $items_order_list['preci5'],
            'quantity' => $items_order_list['quantity'],'loaded' => $items_order_list['loaded'],'reasigned_quantity' => $items_order_list['reasigned_quantity'],
            'pendient_stock' => $items_order_list['pendient_stock'],'billing' => $items_order_list['billing'],
            'observation' =>  $items_order_list['observation'],
            'kg' => $items_order_list['kg'],
            'able_kg' => $items_order_list['able_kg'],
            'product_code' => $items_order_list['product_code'],
            'able_text' => $items_order_list['able_text']
          );

        return $array_item;

    }

    //se usa para actualizar la orden
    function getReportByOrderId(){
        if(isset($_GET['order_id'])){

            $order= $this->getModel()->findById($_GET['order_id']);
            if($order>0){

                $client= $this->clients->findById($order['client_id']);

               // $items_order_list = $this->items_order->findAllItems(array('order_id = "' .$order['id'].'"'));

                $array_item_product = array();
                $array_item_product_rem = array();
                $array_item_product_add = array();
                $total_amount=0;
               /* for ($i = 0; $i < count($items_order_list); ++$i) {

                    if($items_order_list[$i]['billing'] == "remito"){
                        $array_item_product_rem[] = $this->createReportItem($items_order_list[$i],$array_item_product_rem);

                    }else if($items_order_list[$i]['billing'] == "factura"){
                        $array_item_product[] = $this->createReportItem($items_order_list[$i],$array_item_product);

                    }else{
                        $array_item_product_add[] = $this->createReportItem($items_order_list[$i],$array_item_product_add);
                    }

                    if($items_order_list[$i]['loaded'] == "true"){
                        $total_amount=$total_amount+($items_order_list[$i]['price']*$items_order_list[$i]['quantity']);
                    }

                   // $total_amount=$total_amount+($items_order_list[$i]['price']*$items_order_list[$i]['quantity']);
                }*/

                $items_cant = $this->items_order->countItemsByOrder($_GET['order_id']);
                $pendient_items = $this->items_order->countPendientItems("false" ,$_GET['order_id']);

                $proces_user_name="";
                if($order['process_user_id'] > 0 ){

                    $process_user = $this->users->findById($order['process_user_id']);
                    $proces_user_name = $process_user['name'];
                }


                $process_billing_user = $this->users->findById($order['process_billing_user_id']);

                $listReport = array('order_created' =>$order['created'],
                    'order_obs' => $order['observation'],'order_id' => $order['id'],
                    'order_state' => $order['state'],
                    'order_state_check' =>$order['state_check'],
                    'order_state_prepare' =>$order['state_prepare'],
                    'order_state_billing' =>$order['state_billing'],
                    'order_state_delivery' => $order['state_delivery'],
                    'order_signed' => $order['signed'],
                    'order_paid_out' => $order['paid_out'],
                    'order_paid_amount' => $order['paid_amount'],
                    'client_id' => $order['client_id'],
                    'client_nomcli' => $client['nomcli'],
                    'client_dircli' => $client['dircli'],
                    'client_loccli' => $client['loccli'],
                    'assigned_zone' => $order['assigned_zone'],
                    'client_comcli' => $client['comcli'],
                    'delivery_date' => $order['delivery_date'], 'items' => $array_item_product,'items_rem' => $array_item_product_rem,'items_add' => $array_item_product_add,
                    'amount_order' => $total_amount,
                    'loaded_in' => $order['loaded_in'],
                    'loaded_by' => $order['loaded_by'],
                    'prepared_by' => $order['prepared_by'],
                    'billed_by' => $order['billed_by'],
                    'delivery_by' => $order['delivery_by'],
                    'products_cant' => $items_cant,
                    'pendients_cant' => $pendient_items,
                    'prepare_in_process' => $order['prepare_in_process'],
                    'billing_in_process' => $order['billing_in_process'],
                   // 'process_user_name' => $process_user['name'],
                    'process_user_name' => $proces_user_name,
                    //'process_billing_user_name' => $process_user['name']
                    'process_billing_user_name' => $proces_user_name
                );

                $this->returnSuccess(200, $listReport);
            }else{
                $this->returnError(404,"ENTITY NOT FOUND");
            }
        }
    }

    //WORKER LIQUIDATIONS
    public function filterDeliveryWorkers($worker_name,$delivery_date)
    {
        $filters = array();

        $filters[] = 'delivery_by = "' . $worker_name . '"';
        $filters[] = 'state_delivery = "delivery"';
        $filters[] = 'delivery_date = "' .$delivery_date.'"';

        return $filters;
    }

    public function filterLoadWorkers($worker_name,$delivery_date,$loaded_in)
    {
        $filters = array();

        $filters[] = 'loaded_by = "' . $worker_name . '"';
        if($loaded_in != ""){
            $filters[] = 'loaded_in = "' . $loaded_in . '"';
        }
        $filters[] = 'state_delivery = "delivery"';
        $filters[] = 'delivery_date = "' .$delivery_date.'"';

        return $filters;
    }

    function getWorkerLiquidationList(){
        $listReport = array();
        $list_orders_by_deliver_date = $this->model->getAllOrders($this->filterDeliveryWorkers($_GET['worker_name'],$_GET['delivery_date']),$this->getPaginator());
        $this->returnSuccess(200, $this->getReport($list_orders_by_deliver_date,$listReport));
    }


    function getWorkerLoadLiquidationList(){
        $listReport = array();
        $list_orders_by_deliver_date = $this->model->getAllOrders($this->filterLoadWorkers($_GET['worker_name'],$_GET['delivery_date'],$_GET['loaded_in']),$this->getPaginator());
        $this->returnSuccess(200, $this->getReport($list_orders_by_deliver_date,$listReport));
    }
}
