<?php
/**
 * Created by PhpStorm.
 * User: leila
 * Date: 09/05/2019
 * Time: 15:24
 */


require_once 'BaseController.php';
require_once  __DIR__.'/../models/OrderModel.php';
require_once __DIR__.'/../models/ItemOrderModel.php';
require_once __DIR__.'/../models/ClientModel.php';

class OrdersController extends BaseController
{
    private $items_order;
    private $clients;

    private $state_order;

    function __construct(){
        parent::__construct();
        $this->model = new OrderMOdel();
        $this->items_order= new ItemOrderModel();
        $this->clients= new ClientModel();

        $this->state_order="";
    }


    public function delete()
    {
        //TODO ver estado del pedido, si no esta entregado, se borra todo

        if(isset($_GET['id'])){
            $this->items_order->deleteAllByOrderId($_GET['id']);
        }
        parent::delete(); // TODO: Change the autogenerated stub
    }

    function asingFilters(){
        $filters=array();
        $filters[] = 'delivery_date = "'.$_GET['delivery_date'].'"';

        if($_GET['state']== 'tocheck'){
            $this->state_order="state_check";
            $filters[] = 'tocheck = "true"';
            if(isset($_GET['state_order']) && ($_GET['state_order']) == "pendients"){
                $filters[] = 'state_check = "tocheck"';
            }

        }else if ($_GET['state']== 'toprepare'){
            $this->state_order="state_prepare";
            $filters[] = 'toprepare = "true"';

        }else if ($_GET['state']== 'todelivery'){
            $this->state_order="state_delivery";
            $filters[] = 'todelivery = "true"';

        }
        if(isset($_GET['query']) && !empty($_GET['query'])){
            $filters[] = 'comcli like "%'.$_GET['query'].'%"';
        }

        if(isset($_GET['zone']) && !empty($_GET['zone'])){
            $filters[] = 'loccli like "%'.$_GET['zone'].'%"';
        }


        return $filters;
    }


    function getOrdersClient(){

        if(isset($_GET['delivery_date'])) {
            $listReport = array();

            $list_orders_by_deliver_date = $this->getModel()->getOrdersClient($this->asingFilters(),$this->getPaginator(),$this->state_order);

            for ($j = 0; $j < count($list_orders_by_deliver_date); ++$j) {

                $items_order_list = $this->items_order->findAllItems(array('order_id = "' .$list_orders_by_deliver_date[$j]['order_id'].'"'));

                $array_item_product = array();
                $total_amount=0;
                for ($i = 0; $i < count($items_order_list); ++$i) {

                    $array_item_product[] = array('item_order_id' => $items_order_list[$i]['id'],'product_descr' => $items_order_list[$i]['product_descr'], 'price' => $items_order_list[$i]['price'],
                        'preci1' => $items_order_list[$i]['preci1'],'preci2' => $items_order_list[$i]['preci2'],'preci3' => $items_order_list[$i]['preci3'],'preci4' => $items_order_list[$i]['preci4'],'preci5' => $items_order_list[$i]['preci5'],
                        'quantity' => $items_order_list[$i]['quantity'],'loaded' => $items_order_list[$i]['loaded']);

                    $total_amount=$total_amount+($items_order_list[$i]['price']*$items_order_list[$i]['quantity']);

                }

                $listReport[] = array('order_created' => $list_orders_by_deliver_date[$j]['created'],
                    'order_obs' => $list_orders_by_deliver_date[$j]['observation'],'order_id' => $list_orders_by_deliver_date[$j]['order_id'],
                    'order_state' => $list_orders_by_deliver_date[$j]['state'],
                    'order_state_check' => $list_orders_by_deliver_date[$j]['state_check'],
                    'order_state_prepare' => $list_orders_by_deliver_date[$j]['state_prepare'],
                    'order_state_delivery' => $list_orders_by_deliver_date[$j]['state_delivery'],
                    'client_id' => $list_orders_by_deliver_date[$j]['client_id'],
                    'client_nomcli' => $list_orders_by_deliver_date[$j]['nomcli'],
                    'client_dircli' =>$list_orders_by_deliver_date[$j]['dircli'],
                    'client_loccli' => $list_orders_by_deliver_date[$j]['loccli'],
                    'client_comcli' => $list_orders_by_deliver_date[$j]['comcli'],
                    'client_telcli' => $list_orders_by_deliver_date[$j]['telcli'],
                    'delivery_date' => $list_orders_by_deliver_date[$j]['delivery_date'], 'items' => $array_item_product,
                    'amount_order' => $total_amount);
            }


            $this->returnSuccess(200, $listReport);
        }else{
            $this->returnError(404,"ENTITY NOT FOUND");
        }

    }

    function listOrdersByDeliveryDate(){
        if(isset($_GET['delivery_date'])) {
            $listReport = array();

            $list_orders_by_deliver_date = $this->getModel()->findAllOrder($this->asingFilters(),$this->getPaginator(),$this->state_order);

            for ($j = 0; $j < count($list_orders_by_deliver_date); ++$j) {

                $client= $this->clients->findById($list_orders_by_deliver_date[$j]['client_id']);

                $items_order_list = $this->items_order->findAllItems(array('order_id = "' .$list_orders_by_deliver_date[$j]['id'].'"'));

                $array_item_product = array();
                $total_amount=0;
                for ($i = 0; $i < count($items_order_list); ++$i) {

                    $array_item_product[] = array('item_order_id' => $items_order_list[$i]['id'],'product_descr' => $items_order_list[$i]['product_descr'], 'price' => $items_order_list[$i]['price'],
                        'quantity' => $items_order_list[$i]['quantity'],'loaded' => $items_order_list[$i]['loaded']);

                    $total_amount=$total_amount+($items_order_list[$i]['price']*$items_order_list[$i]['quantity']);

                }

                $listReport[] = array('order_created' => $list_orders_by_deliver_date[$j]['created'],
                    'order_obs' => $list_orders_by_deliver_date[$j]['observation'],'order_id' => $list_orders_by_deliver_date[$j]['id'],
                    'order_state' => $list_orders_by_deliver_date[$j]['state'],
                    'order_state_check' => $list_orders_by_deliver_date[$j]['state_check'],
                    'order_state_prepare' => $list_orders_by_deliver_date[$j]['state_prepare'],
                    'order_state_delivery' => $list_orders_by_deliver_date[$j]['state_delivery'],
                    'client_id' => $list_orders_by_deliver_date[$j]['client_id'],
                    'client_nomcli' => $client['nomcli'],
                    'client_dircli' => $client['dircli'],
                    'client_loccli' => $client['loccli'],
                    'client_comcli' => $client['comcli'],
                    'delivery_date' => $list_orders_by_deliver_date[$j]['delivery_date'], 'items' => $array_item_product,
                    'amount_order' => $total_amount);
            }

            $this->returnSuccess(200, $listReport);
        }else{
            $this->returnError(404,"ENTITY NOT FOUND");
        }
    }

    function changeStateOrder(){

        if(isset($_GET['state'])){
            if($_GET['state_name'] == 'tocheck'){

                $this->getModel()->update($_GET['order_id'],array('state_check' => $_GET['state']));
                if($_GET['state'] == "check"){
                    $this->getModel()->update($_GET['order_id'],array('toprepare' => "true"));
                }else{
                    $this->getModel()->update($_GET['order_id'],array('toprepare' => "false"));
                }

            }else if($_GET['state_name'] == 'toprepare'){

                $this->getModel()->update($_GET['order_id'],array('state_prepare' => $_GET['state']));
                if($_GET['state'] == "prepare"){
                    $this->getModel()->update($_GET['order_id'],array('todelivery' => "true"));
                }else{
                    $this->getModel()->update($_GET['order_id'],array('todelivery' => "false"));
                }

            }else if($_GET['state_name'] == 'todelivery'){
                $this->getModel()->update($_GET['order_id'],array('state_delivery' => $_GET['state']));
            }

            $stateOrder=array('state'=>$_GET['state']);

            $this->returnSuccess(200,$stateOrder);
        }else{
            $this->returnError(400,"No se pudo actualizar");
        }
    }

    function getOrdersValues(){
        $checked=0;
        $pendients=0;

        if($_GET['state_name']== 'tocheck'){

            $checked=$this->getModel()->countCheck($_GET['delivery_date'],'check');
            $pendients=$this->getModel()->countCheck($_GET['delivery_date'],'tocheck');

        }else if ($_GET['state_name']== 'toprepare'){

            $checked=$this->getModel()->countPrepare($_GET['delivery_date'],'prepare');
            $pendients=$this->getModel()->countPrepare($_GET['delivery_date'],'toprepare');


        }else if ($_GET['state_name']== 'todelivery'){

            $checked=$this->getModel()->countDelivery($_GET['delivery_date'],'delivery');
            $pendients=$this->getModel()->countDelivery($_GET['delivery_date'],'todelivery');

        }



        $resp=array('pendients' => $pendients, 'checked' => $checked);

        $this->returnSuccess(200,$resp);
    }

    function getReportByOrderId(){
        if(isset($_GET['order_id'])){

            $order= $this->getModel()->findById($_GET['order_id']);
            if($order>0){

                $client= $this->clients->findById($order['client_id']);

                $items_order_list = $this->items_order->findAllItems(array('order_id = "' .$order['id'].'"'));

                $array_item_product = array();
                $total_amount=0;
                for ($i = 0; $i < count($items_order_list); ++$i) {

                    $array_item_product[] = array('item_order_id' => $items_order_list[$i]['id'],'product_descr' => $items_order_list[$i]['product_descr'], 'price' => $items_order_list[$i]['price'],
                        'quantity' => $items_order_list[$i]['quantity'],'loaded' => $items_order_list[$i]['loaded']);

                    $total_amount=$total_amount+($items_order_list[$i]['price']*$items_order_list[$i]['quantity']);
                }

                $listReport = array('order_created' =>$order['created'],
                    'order_obs' => $order['observation'],'order_id' => $order['id'],
                    'order_state' => $order['state'],
                    'order_state_check' =>$order['state_check'],
                    'order_state_prepare' =>$order['state_prepare'],
                    'order_state_delivery' => $order['state_delivery'],
                    'client_id' => $order['client_id'],
                    'client_nomcli' => $client['nomcli'],
                    'client_dircli' => $client['dircli'],
                    'client_loccli' => $client['loccli'],
                    'client_comcli' => $client['comcli'],
                    'delivery_date' => $order['delivery_date'], 'items' => $array_item_product,
                    'amount_order' => $total_amount);

                $this->returnSuccess(200, $listReport);
            }else{
                $this->returnError(404,"ENTITY NOT FOUND");
            }
        }
    }

}