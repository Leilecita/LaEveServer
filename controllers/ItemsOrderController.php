<?php
/**
 * Created by PhpStorm.
 * User: leila
 * Date: 09/05/2019
 * Time: 15:31
 */
require_once 'BaseController.php';
require_once __DIR__.'/../models/ItemOrderModel.php';
require_once __DIR__.'/../models/ProductModel.php';
class ItemsOrderController extends BaseController
{
    private $products;

    function __construct(){
        parent::__construct();
        $this->model = new ItemOrderModel();
        $this->products = new ProductModel();
    }

    function getFiltersItems($billing){
        $filters= array();

        $filters[] = 'billing = "'.$billing.'"';

        if(isset($_GET['order_id'])){
            $filters[] = 'order_id = "'.$_GET['order_id'].'"';
        }

        return $filters;
    }

    function check(){

        if(isset($_GET['item_id'])){

            $this->getModel()->update($_GET['item_id'],array('loaded' => $_GET['loaded']));
            $stateOrder=array('state'=>$_GET['loaded']);

            $this->returnSuccess(200,$stateOrder);
        }else{
            $this->returnError(400,"No se pudo actualizar");
        }
    }

    function checkQuantity($item_order){

        // chequea si la cantidad del item se redujo , y crea otro item con la cantidad faltante
        $old_item_order= $this->model->findById($item_order['id']);

        if($old_item_order['quantity'] > $item_order['quantity']){

            $differenceQuantity= $old_item_order['quantity']-$item_order['quantity'];

            $newItemOrder=array('order_id' => $item_order['order_id'], 'product_id' => $item_order['product_id'],
                'product_descr' => $item_order['product_descr'] ,'quantity' => $differenceQuantity, 'price' => $item_order['price'],
                'preci1' => $item_order['preci1'],'preci2' => $item_order['preci2'],'preci3' => $item_order['preci3'],'preci4' => $item_order['preci4'],
                'preci5' => $item_order['preci5'],'loaded' => "false",'reasigned_quantity' => 'true','pendient_stock' => 'false','billing' => $item_order['billing']);

            $res = $this->model->save($newItemOrder);
        }
    }

    function getItemsByOrderId(){

        $itemsRem=$this->getModel()->findAllItems($this->getFiltersItems("remito"));
        $itemsFact=$this->getModel()->findAllItems($this->getFiltersItems("factura"));
        $itemsAdd=$this->getModel()->findAllItems($this->getFiltersItems("agregado"));

        $resp=array('itemsFact' => $itemsFact, 'itemsRem' => $itemsRem, 'itemsAdd' => $itemsAdd);

        $this->returnSuccess(200,$resp);
    }

    function getItemsByOrderIdEdit(){
        $filter=array();
        $filter[] = 'order_id = "'.$_GET['order_id'].'"';

        $resp=$this->model->findAllItems($filter);

        $this->returnSuccess(200,$resp);
    }


    function put()
    {
        $item_order = (array)json_decode(file_get_contents("php://input"));

        if($item_order['pendient_stock'] == "true"){
            $this->checkQuantity($item_order);
        }
        parent::put(); // TODO: Change the autogenerated stub
    }
}