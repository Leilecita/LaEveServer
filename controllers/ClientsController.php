<?php
/**
 * Created by PhpStorm.
 * User: leila
 * Date: 23/05/2019
 * Time: 09:35
 */


require_once 'BaseController.php';
require_once __DIR__.'/../models/ClientModel.php';
require_once __DIR__.'/../models/OrderModel.php';

class ClientsController extends BaseController
{
    private $orders;
    function __construct(){
        parent::__construct();
        $this->model = new ClientModel();
        $this->orders = new OrderModel();
    }


    function getLocalities(){
        $this->returnSuccess(200,$this->model->getLocalities());
    }

    public function filterOrderByClientId($client_id)
    {
        $filters=array();
        $filters[] = 'client_id = "'.$client_id.'"';
        $filters[] = 'state_prepare = "toprepare"';
        $filters[] = 'state_delivery = "todelivery"';

        return $filters;
    }

/*
     public function checkExistingOrder(){

        if(isset($_GET['client_id'])){
            $res= $this->orders->findAll($this->filterOrderByClientId($_GET['client_id']),$this->getPaginator());
            if(empty($res)){
                $emptylist=array();
                $this->returnSuccess(200,$emptylist);
            }else{
                $this->returnSuccess(200,$res);
            }
        }else{
            $this->returnError(400,"ENTITY NOT FOUND ");
        }
    }*/

    function get(){

        if(isset($_GET['method'])){
            $this->method();
        }else if($this->validateId()){
            $entity = $this->getModel()->findById($_GET['id']);
            if(!empty($entity)){
                $this->returnSuccess(200,$entity);
            }else{
                $this->returnError(404,"ENTITY NOT FOUND");
            }
        }else{
           // $this->returnSuccess(200,$this->getModel()->findAllByNameCli($this->getFilters(),$this->getPaginator()));
            $this->returnSuccess(200,$this->assignFilter());
        }
    }

    function getClients(){
        $clients=$this->model->findAllByNameCli($this->miniFilter(),$this->getPaginator());

        $reportClient = array();
        for ($i = 0; $i < count($clients); ++$i) {

            $res = $this->model->countPendientOrdersByClientId($clients[$i]['id']);

            $order =array('user_id'=>1,'client_id' => 1,
                'state' => "",
                'state_check' => "check",
                'state_prepare' => "toprepare",
                'state_billing' => "tobilling",
                'state_delivery' => "todelivery",
                'tocheck' => "true",
                'toprepare' => "true",
                'tobilling' => "false",
                'todelivery' => "false",
                'observation' => "",
                'total_amount' => 0.0,
                'delivery_date'=> "",
                'loaded_by'=> "",
                'delivery_by' => "",
                'prepared_by' => "",
                'assigned_zone' => "",
                'loaded_in' => "",
                'signed' => "false",
                'paid_out' => "false",
                'paid_amount' => 0.0,
                'order_reasigned_id' => -1);


            if($res > 0 ){
                $orders= $this->orders->getTheFirstOfList($this->filterOrderByClientId($clients[$i]['id']));
                if(empty($orders)){

                }else{
                    $order = $orders[0];
                }

            }

            $reportClient[]=array('id' => $clients[$i]['id'],'nomcli' => $clients[$i]['nomcli'],
                'comcli' => $clients[$i]['comcli'],'dircli' => $clients[$i]['dircli'],
                'telcli' => $clients[$i]['telcli'],'loccli' => $clients[$i]['loccli'],
                'celcli' => $clients[$i]['celcli'],

                'pendient_orders' => $res,'order' => $order);
        }

        $this->returnSuccess(200,$reportClient);


    }

    public function getFilters()
    {
        $filters = parent::getFilters(); // TODO: Change the autogenerated stub
        if(isset($_GET['query']) && !empty($_GET['query'])){
           // $filters[] = 'nomcli like "%'.$_GET['query'].'%"';
            $filters[] = 'nomcli like "'.$_GET['query'].'%" OR nomcli like "%'.$_GET['query'].'%"';
        }
        return $filters;
    }

    public function getFiltersContain()
    {
        $filters = parent::getFilters(); // TODO: Change the autogenerated stub
        if(isset($_GET['query']) && !empty($_GET['query'])){
             $filters[] = 'nomcli like "%'.$_GET['query'].'%"';
        }
        return $filters;
    }

    public function getFiltersFirstLetter()
    {
        $filters = parent::getFilters(); // TODO: Change the autogenerated stub
        if(isset($_GET['query']) && !empty($_GET['query'])){
            $filters[] = 'nomcli like "'.$_GET['query'].'%"';
        }
        return $filters;
    }

    public function getFiltersContainCom()
    {
        $filters = parent::getFilters(); // TODO: Change the autogenerated stub
        if(isset($_GET['query']) && !empty($_GET['query'])){
            $filters[] = 'comcli like "%'.$_GET['query'].'%"';
        }
        return $filters;
    }

    public function getFiltersFirstLetterCom()
    {
        $filters = parent::getFilters(); // TODO: Change the autogenerated stub
        if(isset($_GET['query']) && !empty($_GET['query'])){
            $filters[] = 'comcli like "'.$_GET['query'].'%"';
        }
        return $filters;
    }


    public function miniFilter(){
        $filters = parent::getFilters();

        if(isset($_GET['query']) && !empty($_GET['query'])){
            $filters[] = '(comcli like "%'.$_GET['query'].'%" OR nomcli like "%'.$_GET['query'].'%")';
        }

        return $filters;
    }


     public function assignFilter(){
       $res= $this->getModel()->findAllByNameCli($this->miniFilter(),$this->getPaginator());

        return $res;
        /*$res=$this->getModel()->findAllByNameCli($this->getFiltersFirstLetter(),$this->getPaginator());
        $resContain=$this->getModel()->findAllByNameCli($this->getFiltersContain(),$this->getPaginator());
        $resContainCom=$this->getModel()->findAllByNameCli($this->getFiltersContainCom(),$this->getPaginator());

        $resCom=$this->getModel()->findAllByNameCli($this->getFiltersFirstLetterCom(),$this->getPaginator());

        return $res+$resContain+$resCom+$resContainCom;*/
    }

}